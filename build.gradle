buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true


    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'),
                '--existing-mod', 'tfc'
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    flatDir {
        dirs 'run/jarinjar'
    }
}

configurations {
    mod
    serverOnly
    clientOnly
    distOnly
    serverDistOnly
    clientDistOnly

    implementation.extendsFrom mod
    implementation.extendsFrom serverOnly
    implementation.extendsFrom clientOnly

    distOnly.extendsFrom mod

    serverDistOnly.extendsFrom serverOnly
    serverDistOnly.extendsFrom distOnly

    clientDistOnly.extendsFrom clientOnly
    clientDistOnly.extendsFrom distOnly
}

dependencies {
    //noinspection VulnerableLibrariesLocal
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"

    // Libs
    mod fg.deobf("curse.maven:codechicken-lib-1-8-242818:5420418")
    mod fg.deobf("curse.maven:architectury-api-419699:5137938")
    mod fg.deobf("curse.maven:cb-multipart-258426:5311521")
    mod fg.deobf("curse.maven:cloth-config-348521:4973441")
    mod fg.deobf("curse.maven:curios-309927:5367944")
    mod fg.deobf("curse.maven:patchouli-306770:4966125")
    mod fg.deobf("curse.maven:searchables-858542:5284015")
    mod fg.deobf("curse.maven:resourceful-lib-570073:5568216")

    // Main mods
    mod fg.deobf("curse.maven:terrafirmacraft-302973:5571484")
    mod fg.deobf("curse.maven:applied-energistics-2-223794:5565729")
    mod fg.deobf("curse.maven:cc-tweaked-282001:5582994")
    mod fg.deobf("curse.maven:create-328085:4835191")
    mod fg.deobf("curse.maven:mekanism-268560:5395221")
    mod fg.deobf("curse.maven:mekanism-generators-268566:5395224")

    // Glue
    mod fg.deobf("curse.maven:applied-mekanistics-574300:4842281")
    mod fg.deobf("curse.maven:create-applied-kinetics-867328:5077786")

    // QoL mods
    mod fg.deobf("curse.maven:applied-energistics-2-wireless-terminals-459929:5217955")
    mod fg.deobf("curse.maven:better-advancements-272515:5454909")
    mod fg.deobf("curse.maven:jade-324717:5493390")
    mod fg.deobf("curse.maven:jade-addons-583345:4925840")
    mod fg.deobf("curse.maven:jei-238222:5576551")
    mod fg.deobf("curse.maven:just-enough-mekanism-multiblocks-898746:5569679")
    mod fg.deobf("curse.maven:mekanism-cardboard-tooltip-975586:5299534")
    clientOnly fg.deobf("curse.maven:appleskin-248787:4770828")
    clientOnly fg.deobf("curse.maven:controlling-250398:4646682")
    clientOnly fg.deobf("curse.maven:neat-238372:4580940") // neat
    //clientOnly fg.deobf("curse.maven:forge-client-reset-packet-forward-862147:4808617")
    clientOnly fg.deobf("curse.maven:server-redirect-295232:4683939")
    clientDistOnly fg.deobf("curse.maven:mouse-tweaks-60089:4581240")
    clientDistOnly fg.deobf("curse.maven:sound-physics-remastered-535489:5525256")

    // Performance & Fixes
    distOnly fg.deobf("curse.maven:clumps-256717:5278538")
    distOnly fg.deobf("curse.maven:ferritecore-429235:4810975")
    distOnly fg.deobf("curse.maven:modernfix-790626:5569652")
    distOnly fg.deobf("curse.maven:packet-fixer-689467:5416166")

    // Tools
    mod fg.deobf("curse.maven:crafttweaker-239197:5375591")
    mod fg.deobf("curse.maven:open-parties-and-claims-636608:5556895")
    mod fg.deobf("curse.maven:spark-361579:4738952")
    mod fg.deobf("curse.maven:xaeros-minimap-263420:5394772")
    mod fg.deobf("curse.maven:xaeros-world-map-317780:5394829")
    mod fg.deobf("curse.maven:heracles-845831:5406935")
    mod fg.deobf("curse.maven:argonauts-845833:5263580")
    mod fg.deobf("curse.maven:prometheus-845834:5220299")
    serverDistOnly fg.deobf("curse.maven:luckperms-431733:4738950")

    // JarInJar hack
    implementation fg.deobf("local:hermes-forge:1.20-1.6.0")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

var remapToObf = objects.mapProperty(String, File).value(providers.provider {
    Map<String, File> mapped = [:]
    configurations.__obfuscated.resolvedConfiguration.resolvedArtifacts.collect {
        mapped.put(it.moduleVersion.id.toString(), it.file)
    }
    return mapped
}).tap {
    disallowChanges()
    finalizeValueOnRead()
}

def addCommonFiles(Zip zip, boolean includeMods = true, String basePath = "") {
    zip.with {
        if (includeMods) {
            from(jar.outputs) {
                into basePath + "/mods"
            }
        }

        from(layout.projectDirectory.file("src/pack/minecraft")) {
            into basePath
        }
    }
}

tasks.register("packageServer", Zip) {
    archiveBaseName = "hotswap-server"
    destinationDirectory = file("${layout.buildDirectory.get()}/distributions")

    addCommonFiles(it)

    configurations.serverDistOnly.resolvedConfiguration.resolvedArtifacts.collect {
        var mod = remapToObf.get().get(it.moduleVersion.id.toString().replaceAll('_mapped_.*', ''))
        inputs.file(mod)
        from (mod) {
            into "mods"
        }
    }

    group('modpack')
    description("Makes a server pack")
}

tasks.register("packageManual", Zip) {
    archiveBaseName = "hotswap"
    destinationDirectory = file("${layout.buildDirectory.get()}/distributions")

    addCommonFiles(it)

    configurations.clientDistOnly.resolvedConfiguration.resolvedArtifacts.collect {
        var mod = remapToObf.get().get(it.moduleVersion.id.toString().replaceAll('_mapped_.*', ''))
        inputs.file(mod)
        from (mod) {
            into "mods"
        }
    }

    group('modpack')
    description("Makes a client pack")
}

tasks.register("packageTechnic", Zip) {
    archiveBaseName = "hotswap-technic"
    destinationDirectory = file("${layout.buildDirectory.get()}/distributions")

    addCommonFiles(it)

    from(layout.projectDirectory.file("src/pack/technic"))

    configurations.clientDistOnly.resolvedConfiguration.resolvedArtifacts.collect {
        var mod = remapToObf.get().get(it.moduleVersion.id.toString().replaceAll('_mapped_.*', ''))
        inputs.file(mod)
        from (mod) {
            into "mods"
        }
    }

    group('modpack')
    description("Makes a client pack")
}

tasks.register("packageMultiMC", Zip) {
    archiveBaseName = "hotswap-multimc"
    destinationDirectory = file("${layout.buildDirectory.get()}/distributions")

    addCommonFiles(it, true, ".minecraft")

    from(layout.projectDirectory.file("src/pack/mmc"))

    configurations.clientDistOnly.resolvedConfiguration.resolvedArtifacts.collect {
        var mod = remapToObf.get().get(it.moduleVersion.id.toString().replaceAll('_mapped_.*', ''))
        inputs.file(mod)
        from (mod) {
            into ".minecraft/mods"
        }
    }

    group('modpack')
    description("Makes a client pack")
}

tasks.register("packageAll") {
    dependsOn("packageServer", "packageManual", "packageTechnic", "packageMultiMC")
    group('modpack')
    description("Makes all packs")
}